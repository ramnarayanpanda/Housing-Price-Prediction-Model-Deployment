# Tox is a generic virtualenv management and test command line tool. Its goal is to
# standardize testing in Python. We will be using it extensively in this course.

# Using Tox we can (on multiple operating systems):
# + Eliminate PYTHONPATH challenges when running scripts/tests
# + Eliminate virtualenv setup confusion
# + Streamline steps such as model training, model publishing

# In simple words tox tests your package / CLI against several python versions 
# You use it when you want to test your python package with diff python versions 
# With tox you can check only on local system not on cloud

# Everything you see inside a [], is a different env
# env is going to setup virtual env in your .tox hidden directory 
# we can run comands in a specific env, 
# we can also inherit commands and dependencies from other envs





# here we have 2 default envs, tox, testenv 
# if we run just the tox env then it going to run all the sub envs:
# test_package, typechecks, stylechecks, lint 
[tox] 
envlist = test_package, typechecks, stylechecks, lint 
skipsdist = True

# if you run just "tox" then all the above mentioned envs will run one by one 
# to run any specific one env let's say test_package  "tox -e test_package"


# testenv is like a base/parent class if you think of inheritance 
[testenv] 
install_command = pip install {opts} {packages} 



# for the env test_package we are telling tox to install the requirements from test_requirements.txt 
# so we need to give the path to test_requirements.txt
# -r with no space is tox synatx for specifying path
[testenv:test_package] 
deps = 
    -rrequirements/test_requirements.txt
setenv =  
    PYTHONPATH=.
    PYTHONHASHSEED=0
# commands tells what commands to run with in this particular env (test_package)
commands = 
    python regression_model/train_pipeline.py 
    # the below is just one command \ indicates we are breaking down the command into lines
    # we passing in some args like -s, -vv, so that we can get some output and we can see the logs/print statements 
    pytest \ 
    -s \ 
    -vv \ 
    {posargs:tests/}

# to run the above test_package env you need to run tox -e test_package 
# when you run following things wil happen in a sequence 
# first it will try to install all the requirements from the test_requirements.txt 
# then it will run each command in present in the commands  


[testenv:predict]
envdir = {toxworkdir}/test_package 
deps = 
    {[testenv:test_package]deps}
setenv = 
    {[testenv:test_package]setenv} 
commands = 
    python regression_model/predict.py 






[testenv:train]
envdir = {toxworkdir}/test_package 
deps = 
    {[testenv:test_package]deps}
setenv = 
    {[testenv:test_package]setenv} 
commands = 
    python regression_model/train_pipeline.py 
# so when you run tox -e train then it will 
# first try to install all the packages, becuase we are inheriting 
# deps and setenv from test_package
# then it will run  "python regression_model/train_pipeline.py" 

# we can use tox for running commands also not just for testing purpose
# this is a common misunderstanding 

[testenv:typechecks]
envdir = {toxworkdir}/test_package
deps = 
    {[testenv:test_package]deps}
commands = {posargs:mypy regression_model} 



[testenv:stylechecks] 
envdir = {toxworkdir}/test_package
deps =
	{[testenv:test_package]deps}
commands = {posargs:flake8 regression_model tests}



# mypy helps in checking the input type and output type needs to be passed to or returned from a model 
# 
[testenv:lint]
envdir = {toxworkdir}/test_package 
deps = {[testenv:test_package]deps}

commands =  
    isort regression_model tests  
    black regression_model tests
    # mypy regression_model
    # flake8 regression_model  

[flake8]
exclude = .git,env 
max-line-length = 100